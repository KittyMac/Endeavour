import Foundation
import ArgumentParser
import Picaroon
import Flynn
import Hitch
import Spanker

public extension Endeavour {
    class Manager: Actor {
        public static let shared = Manager()
        override private init() {}

        private var documents: [DocumentUUID: Document] = [:]

        private func _beNewDocument(userUUID: OwnerUUID) -> DocumentUUID? {
            let document = Document(owner: userUUID)
            let documentUUID = document.unsafeDocumentUUID
            documents[documentUUID] = document
            return documentUUID
        }

        private func _beJoinDocument(userUUID: OwnerUUID,
                                     documentUUID: DocumentUUID,
                                     _ returnCallback: @escaping (Error?) -> Void) {
            guard let document = documents[documentUUID] else {
                return returnCallback("The document does not exist")
            }
            document.beAdd(waiting: userUUID, self) { error in
                guard error == nil else { return returnCallback(error) }
                returnCallback(nil)
            }
        }

        private func _beCloseDocument(userUUID: OwnerUUID,
                                      documentUUID: DocumentUUID,
                                      _ returnCallback: @escaping (Error?) -> Void) {
            guard let document = documents[documentUUID] else {
                return returnCallback("The document does not exist")
            }
            document.beAuthorize(owner: userUUID, self) { error in
                guard error == nil else { return returnCallback(error) }
                self.documents[document.unsafeDocumentUUID] = nil
                returnCallback(nil)
            }
        }

        private func _bePushToDocument(userUUID: OwnerUUID,
                                       documentUUID: DocumentUUID,
                                       version: Int,
                                       updates: JsonElement,
                                       _ returnCallback: @escaping (Error?) -> Void) {
            guard let document = documents[documentUUID] else {
                return returnCallback("The document does not exist")
            }
            document.bePushTo(peer: userUUID,
                              version: version,
                              updates: updates,
                              self,
                              returnCallback)
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Endeavour.Manager {

    @discardableResult
    public func beNewDocument(userUUID: OwnerUUID,
                              _ sender: Actor,
                              _ callback: @escaping ((DocumentUUID?) -> Void)) -> Self {
        unsafeSend {
            let result = self._beNewDocument(userUUID: userUUID)
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beJoinDocument(userUUID: OwnerUUID,
                               documentUUID: DocumentUUID,
                               _ sender: Actor,
                               _ callback: @escaping ((Error?) -> Void)) -> Self {
        unsafeSend {
            self._beJoinDocument(userUUID: userUUID, documentUUID: documentUUID) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beCloseDocument(userUUID: OwnerUUID,
                                documentUUID: DocumentUUID,
                                _ sender: Actor,
                                _ callback: @escaping ((Error?) -> Void)) -> Self {
        unsafeSend {
            self._beCloseDocument(userUUID: userUUID, documentUUID: documentUUID) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }
    @discardableResult
    public func bePushToDocument(userUUID: OwnerUUID,
                                 documentUUID: DocumentUUID,
                                 version: Int,
                                 updates: JsonElement,
                                 _ sender: Actor,
                                 _ callback: @escaping ((Error?) -> Void)) -> Self {
        unsafeSend {
            self._bePushToDocument(userUUID: userUUID, documentUUID: documentUUID, version: version, updates: updates) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }

}
