import Foundation
import ArgumentParser
import Picaroon
import Flynn
import Hitch
import Spanker

public typealias DocumentUUID = Hitch
public typealias DocumentContent = Hitch
public typealias DocumentVersion = Int

public typealias OwnerUUID = Hitch
public typealias Error = HalfHitch

public class Endeavour: Actor {
    public static let shared = Endeavour()
    override private init() {}

    private var documents: [DocumentUUID: Document] = [:]

    private func _beNewDocument(userUUID: OwnerUUID,
                                content: Hitch?,
                                _ returnCallback: @escaping (DocumentInfo?, Error?) -> Void) {
        let document = Document(owner: userUUID,
                                content: content)
        document.beGetInfo(user: userUUID, self) { documentInfo, error in
            guard error == nil else { return returnCallback(nil, error) }
            guard let documentInfo = documentInfo else { return returnCallback(nil, "document info is missing") }
            self.documents[documentInfo.uuid] = document
            returnCallback(documentInfo, nil)
        }
    }

    private func _beNewDocument(userUUID: OwnerUUID,
                                named: Hitch?,
                                content: Hitch?,
                                _ returnCallback: @escaping (DocumentInfo?, Error?) -> Void) {
        let document = Document(owner: userUUID,
                                named: named,
                                content: content)
        document.beGetInfo(user: userUUID, self) { documentInfo, error in
            guard error == nil else { return returnCallback(nil, error) }
            guard let documentInfo = documentInfo else { return returnCallback(nil, "document info is missing") }
            self.documents[documentInfo.uuid] = document
            returnCallback(documentInfo, nil)
        }
    }

    private func _beJoinDocument(userUUID: OwnerUUID,
                                 documentUUID: DocumentUUID,
                                 _ returnCallback: @escaping (DocumentInfo?, Error?) -> Void) {
        guard let document = documents[documentUUID] else {
            return returnCallback(nil, "The document does not exist")
        }
        document.beAdd(waiting: userUUID,
                       self,
                       returnCallback)
    }

    private func _beCloseDocument(userUUID: OwnerUUID,
                                  documentUUID: DocumentUUID,
                                  _ returnCallback: @escaping (Error?) -> Void) {
        guard let document = documents[documentUUID] else {
            return returnCallback("The document does not exist")
        }
        document.beAuthorize(owner: userUUID, self) { error in
            guard error == nil else { return returnCallback(error) }
            self.documents[documentUUID] = nil
            returnCallback(nil)
        }
    }

    private func _bePushToDocument(userUUID: OwnerUUID,
                                   documentUUID: DocumentUUID,
                                   version: Int,
                                   updates: JsonElement,
                                   _ returnCallback: @escaping (Error?) -> Void) {
        guard let document = documents[documentUUID] else {
            return returnCallback("The document does not exist")
        }
        document.bePushTo(peer: userUUID,
                          version: version,
                          updates: updates,
                          self,
                          returnCallback)
    }

    private func _bePullDocument(userUUID: OwnerUUID,
                                 documentUUID: DocumentUUID,
                                 version: Int,
                                 _ returnCallback: @escaping (HalfHitch?) -> Void) {
        guard let document = documents[documentUUID] else {
            return returnCallback("The document does not exist")
        }
        document.bePull(peer: userUUID,
                        version: version,
                        self,
                        returnCallback)
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Endeavour {

    @discardableResult
    public func beNewDocument(userUUID: OwnerUUID,
                              content: Hitch?,
                              _ sender: Actor,
                              _ callback: @escaping ((DocumentInfo?, Error?) -> Void)) -> Self {
        unsafeSend {
            self._beNewDocument(userUUID: userUUID, content: content) { arg0, arg1 in
                sender.unsafeSend {
                    callback(arg0, arg1)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beNewDocument(userUUID: OwnerUUID,
                              named: Hitch?,
                              content: Hitch?,
                              _ sender: Actor,
                              _ callback: @escaping ((DocumentInfo?, Error?) -> Void)) -> Self {
        unsafeSend {
            self._beNewDocument(userUUID: userUUID, named: named, content: content) { arg0, arg1 in
                sender.unsafeSend {
                    callback(arg0, arg1)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beJoinDocument(userUUID: OwnerUUID,
                               documentUUID: DocumentUUID,
                               _ sender: Actor,
                               _ callback: @escaping ((DocumentInfo?, Error?) -> Void)) -> Self {
        unsafeSend {
            self._beJoinDocument(userUUID: userUUID, documentUUID: documentUUID) { arg0, arg1 in
                sender.unsafeSend {
                    callback(arg0, arg1)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beCloseDocument(userUUID: OwnerUUID,
                                documentUUID: DocumentUUID,
                                _ sender: Actor,
                                _ callback: @escaping ((Error?) -> Void)) -> Self {
        unsafeSend {
            self._beCloseDocument(userUUID: userUUID, documentUUID: documentUUID) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }
    @discardableResult
    public func bePushToDocument(userUUID: OwnerUUID,
                                 documentUUID: DocumentUUID,
                                 version: Int,
                                 updates: JsonElement,
                                 _ sender: Actor,
                                 _ callback: @escaping ((Error?) -> Void)) -> Self {
        unsafeSend {
            self._bePushToDocument(userUUID: userUUID, documentUUID: documentUUID, version: version, updates: updates) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }
    @discardableResult
    public func bePullDocument(userUUID: OwnerUUID,
                               documentUUID: DocumentUUID,
                               version: Int,
                               _ sender: Actor,
                               _ callback: @escaping ((HalfHitch?) -> Void)) -> Self {
        unsafeSend {
            self._bePullDocument(userUUID: userUUID, documentUUID: documentUUID, version: version) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }

}
